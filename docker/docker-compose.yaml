version: "3"

networks:
  homelab:
    external: true

services:

  mariadb:
    image: mariadb:10.5
    container_name: mariadb
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_DATABASE=photoview
      - MYSQL_USER=photoview
      - MYSQL_PASSWORD=${PHOTOVIEW_PASSWORD}
      - MYSQL_RANDOM_ROOT_PASSWORD=1
    networks:
      - homelab
    volumes:
      - ${VOL}/mariadb:/var/lib/mysql
    restart: unless-stopped

  photoview:
    image: viktorstrate/photoview:latest
    container_name: photoview
    ports:
      - "8082:80"
    networks:
      - homelab
    depends_on:
      - mariadb
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - PHOTOVIEW_DATABASE_DRIVER=mysql
      - PHOTOVIEW_MYSQL_URL=photoview:${PHOTOVIEW_PASSWORD}@tcp(mariadb)/photoview
      - PHOTOVIEW_LISTEN_IP=photoview
      - PHOTOVIEW_LISTEN_PORT=80
      - PHOTOVIEW_MEDIA_CACHE=/app/cache

      # Optional: To enable map related features, you need to create a mapbox token.
      # A token can be generated for free here https://account.mapbox.com/access-tokens/
      # It's a good idea to limit the scope of the token to your own domain, to prevent others from using it.
      # - MAPBOX_TOKEN=<YOUR TOKEN HERE>

    volumes:
      - /mnt/nas/thumbs:/app/cache
      - /mnt/nas/media:/photos:ro
    restart: unless-stopped

  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=Europe/Madrid
    volumes:
      - ${VOL}/heimdall/config:/config
    ports:
      - 80:80
      - 443:443
    networks:
      - homelab
    restart: unless-stopped

  syncthing:
    image: syncthing/syncthing
    container_name: syncthing
    hostname: backup
    environment:
      - PUID=$PUID
      - PGID=$PGID
    volumes:
      - ${VOL}/syncthing:/var/syncthing
    ports:
      - 8384:8384 # Web UI
      - 22000:22000/tcp # TCP file transfers
      - 22000:22000/udp # QUIC file transfers
      - 21027:21027/udp # Receive local discovery broadcasts
    networks:
      - homelab
    restart: unless-stopped

  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    hostname: pihole
    environment:
      - TZ='Europe/Madrid'
      - PUID=$PUID
      - PGID=$PGID
      - VIRTUAL_HOST=pihole.lan
    volumes:
      - $VOL/pihole/etc-pihole:/etc/pihole
      - $VOL/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
    ports:
      - "53:53/tcp" # DNS
      - "53:53/udp" # DNS
      - "$PIHOLE_PORT:80/tcp" # Web interface
    networks:
      - homelab
    restart: unless-stopped

  uptime:
    image: louislam/uptime-kuma:1
    container_name: uptime
    hostname: uptime
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - FILE__PASSWORD=/run/secrets/secret_1
    volumes:
      - ${VOL}/uptime-kuma/data:/app/data
    ports:
      - 3001:3001
    networks:
      - homelab
    extra_hosts:
      - "pihole.lan:$MINIPC_IP"
    secrets:
      - secret_1
    restart: always

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    hostname: watchtower
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${GMAIL_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${GMAIL_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${GMAIL_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${GMAIL_PASSWORD}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - homelab
    restart: always

  postgresql:
    image: postgres:10.21
    container_name: postgresql
    hostname: postgresql
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - POSTGRES_PASSWORD=${PORTFOLIO_PASSWORD}
      - POSTGRES_USER=funds
    volumes:
      - ${VOL}/postgresql:/var/lib/postgresql/data
    networks:
      - homelab
    restart: always

  portfolio:
    image: macvaz82/portfolio:latest
    container_name: portfolio
    hostname: portfolio
    depends_on:
      - postgresql
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - PROJECT_HOME=/app
    ports:
      - 8000:8000
    volumes:
      - ${VOL}/portfolio/portfolio-manager:/app
    networks:
      - homelab
    command: python /app/manage.py runserver 0.0.0.0:8000
    restart: always


secrets:
  secret_1:
    file: ${VOL}/secrets/secret_1.txt
